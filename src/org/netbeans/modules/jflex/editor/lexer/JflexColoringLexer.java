/* The following code was generated by JFlex 1.4.3 on 12/4/22 11:34 PM */

   /*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */

package org.netbeans.modules.jflex.editor.lexer;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.jflex.editor.common.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/4/22 11:34 PM from the specification file
 * <tt>C:/Users/bhaidu.PENTALOG/Documents/NetBeansProjects/JflexEditor/tools/JflexColoringLexer.flex</tt>
 */
public class JflexColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_JFLEX_LEXICAL_RULES = 24;
  public static final int ST_JFLEX_STATE_DEFINE = 16;
  public static final int ST_JFLEX_LEXER_USERCODE = 20;
  public static final int ST_JFLEX_STATE_LEXICAL_RULE_CODE = 10;
  public static final int ST_JFLEX_LOOKING_FOR_LABEL = 26;
  public static final int ST_JFLEX_LOOKING_FOR_OPTION_PARAM = 4;
  public static final int ST_JFLEX_TAG = 14;
  public static final int ST_JFLEX_STATE_LEXICAL_RULE = 6;
  public static final int ST_JFLEX_CODEVAL_OPTION = 22;
  public static final int ST_JFLEX_LOOKING_FOR_RULE_CODE = 12;
  public static final int ST_JFLEX_OPTIONS_AND_DECLARATIONS = 2;
  public static final int ST_JFLEX_REGEX_DEFINE = 18;
  public static final int YYINITIAL = 0;
  public static final int ST_JFLEX_STATE_LEXICAL_RULE_LIST = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\0\1\5\23\0\1\23\1\0\1\20\2\0"+
    "\1\3\1\0\1\42\1\50\1\0\1\22\1\0\1\7\2\0\1\21"+
    "\12\12\2\0\1\6\1\0\1\10\2\0\1\36\1\44\2\1\1\33"+
    "\1\34\1\45\1\27\1\24\2\1\1\37\1\1\1\25\1\31\1\46"+
    "\1\1\1\30\1\40\1\26\1\47\1\35\1\32\1\1\1\43\1\1"+
    "\1\14\1\17\1\15\1\0\1\1\1\0\1\36\1\44\2\1\1\33"+
    "\1\34\1\45\1\27\1\24\2\1\1\37\1\1\1\25\1\31\1\52"+
    "\1\1\1\30\1\40\1\26\1\47\1\35\1\32\1\1\1\51\1\1"+
    "\1\11\1\16\1\13\1\41\53\1\1\1\12\1\1\1\4\1\1\1"+
    "\5\1\27\1\1\1\37\1\1\1\10\1\u01c2\1\4\0\14\1\16\0"+
    "\5\1\7\0\1\1\1\0\1\1\201\0\5\1\1\0\2\1\2\0"+
    "\4\1\10\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0"+
    "\123\1\1\0\213\1\10\0\236\1\11\0\46\1\2\0\1\1\7\0"+
    "\47\1\110\0\33\1\5\0\3\1\55\0\53\1\25\0\12\2\4\0"+
    "\2\1\1\0\143\1\1\0\1\1\17\0\2\1\7\0\2\1\12\2"+
    "\3\1\2\0\1\1\20\0\1\1\1\0\36\1\35\0\131\1\13\0"+
    "\1\1\16\0\12\2\41\1\11\0\2\1\4\0\1\1\5\0\26\1"+
    "\4\0\1\1\11\0\1\1\3\0\1\1\27\0\31\1\107\0\1\1"+
    "\1\0\13\1\127\0\66\1\3\0\1\1\22\0\1\1\7\0\12\1"+
    "\4\0\12\2\1\0\7\1\1\0\7\1\5\0\10\1\2\0\2\1"+
    "\2\0\26\1\1\0\7\1\1\0\1\1\3\0\4\1\3\0\1\1"+
    "\20\0\1\1\15\0\2\1\1\0\3\1\4\0\12\2\2\1\23\0"+
    "\6\1\4\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\37\0\4\1\1\0\1\1\7\0\12\2\2\0"+
    "\3\1\20\0\11\1\1\0\3\1\1\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\5\1\3\0\1\1\22\0\1\1\17\0\2\1\4\0"+
    "\12\2\25\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\5\1\3\0\1\1\36\0\2\1\1\0\3\1\4\0"+
    "\12\2\1\0\1\1\21\0\1\1\1\0\6\1\3\0\3\1\1\0"+
    "\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0"+
    "\3\1\3\0\14\1\26\0\1\1\25\0\12\2\25\0\10\1\1\0"+
    "\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1\32\0"+
    "\2\1\6\0\2\1\4\0\12\2\25\0\10\1\1\0\3\1\1\0"+
    "\27\1\1\0\12\1\1\0\5\1\3\0\1\1\40\0\1\1\1\0"+
    "\2\1\4\0\12\2\1\0\2\1\22\0\10\1\1\0\3\1\1\0"+
    "\51\1\2\0\1\1\20\0\1\1\21\0\2\1\4\0\12\2\12\0"+
    "\6\1\5\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0"+
    "\7\1\72\0\60\1\1\0\2\1\14\0\7\1\11\0\12\2\47\0"+
    "\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0"+
    "\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0"+
    "\2\1\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0"+
    "\1\1\11\0\12\2\2\0\4\1\40\0\1\1\37\0\12\2\26\0"+
    "\10\1\1\0\44\1\33\0\5\1\163\0\53\1\24\0\1\1\12\2"+
    "\6\0\6\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0\3\1"+
    "\4\0\15\1\14\0\1\1\1\0\12\2\6\0\46\1\1\0\1\1"+
    "\5\0\1\1\2\0\53\1\1\0\u014d\1\1\0\4\1\2\0\7\1"+
    "\1\0\1\1\1\0\4\1\2\0\51\1\1\0\4\1\2\0\41\1"+
    "\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\17\1"+
    "\1\0\71\1\1\0\4\1\2\0\103\1\45\0\20\1\20\0\125\1"+
    "\14\0\u026c\1\2\0\21\1\1\0\32\1\5\0\113\1\25\0\15\1"+
    "\1\0\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0\3\1"+
    "\17\0\64\1\43\0\1\1\4\0\1\1\3\0\12\2\46\0\12\2"+
    "\6\0\130\1\10\0\51\1\1\0\1\1\5\0\106\1\12\0\35\1"+
    "\51\0\12\2\36\1\2\0\5\1\13\0\54\1\25\0\7\1\10\0"+
    "\12\2\46\0\27\1\11\0\65\1\53\0\12\2\6\0\12\2\15\0"+
    "\1\1\135\0\57\1\21\0\7\1\4\0\12\2\51\0\36\1\15\0"+
    "\2\1\12\2\54\1\32\0\44\1\34\0\12\2\3\0\3\1\12\2"+
    "\44\1\153\0\4\1\1\0\4\1\3\0\2\1\11\0\300\1\100\0"+
    "\u0116\1\2\0\6\1\2\0\46\1\2\0\6\1\2\0\10\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\37\1\2\0\65\1\1\0"+
    "\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0"+
    "\6\1\4\0\15\1\5\0\3\1\1\0\7\1\164\0\1\1\15\0"+
    "\1\1\20\0\15\1\145\0\1\1\4\0\1\1\2\0\12\1\1\0"+
    "\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1\64\0"+
    "\2\1\u0a7b\0\57\1\1\0\57\1\1\0\205\1\6\0\4\1\3\0"+
    "\2\1\14\0\46\1\1\0\1\1\5\0\1\1\2\0\70\1\7\0"+
    "\1\1\20\0\27\1\11\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\120\0"+
    "\1\1\u01d5\0\2\1\52\0\5\1\5\0\2\1\4\0\126\1\6\0"+
    "\3\1\1\0\132\1\1\0\4\1\5\0\51\1\3\0\136\1\21\0"+
    "\33\1\65\0\20\1\u0200\0\u19b6\1\112\0\u51cd\1\63\0\u048d\1\103\0"+
    "\56\1\2\0\u010d\1\3\0\20\1\12\2\2\1\24\0\57\1\20\0"+
    "\31\1\10\0\106\1\61\0\11\1\2\0\147\1\2\0\4\1\1\0"+
    "\4\1\14\0\13\1\115\0\12\1\1\0\3\1\1\0\4\1\1\0"+
    "\27\1\35\0\64\1\16\0\62\1\34\0\12\2\30\0\6\1\3\0"+
    "\1\1\4\0\12\2\34\1\12\0\27\1\31\0\35\1\7\0\57\1"+
    "\34\0\1\1\12\2\46\0\51\1\27\0\3\1\1\0\10\1\4\0"+
    "\12\2\6\0\27\1\3\0\1\1\5\0\60\1\1\0\1\1\3\0"+
    "\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\2\0"+
    "\13\1\7\0\3\1\14\0\6\1\2\0\6\1\2\0\6\1\11\0"+
    "\7\1\1\0\7\1\221\0\43\1\15\0\12\2\6\0\u2ba4\1\14\0"+
    "\27\1\4\0\61\1\u2104\0\u016e\1\2\0\152\1\46\0\7\1\14\0"+
    "\5\1\5\0\1\1\1\0\12\1\1\0\15\1\1\0\5\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0"+
    "\100\1\2\0\66\1\50\0\14\1\164\0\5\1\1\0\207\1\23\0"+
    "\12\2\7\0\32\1\6\0\32\1\13\0\131\1\3\0\6\1\2\0"+
    "\6\1\2\0\6\1\2\0\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\2\2\1\3\1\2\1\4\1\5\4\2"+
    "\1\6\1\1\1\7\1\1\1\10\1\11\5\1\1\12"+
    "\1\1\1\4\1\13\1\14\5\1\1\15\1\16\1\4"+
    "\1\17\3\7\1\20\1\7\3\1\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\3\23\4\0\2\27\10\0\2\30"+
    "\2\0\1\31\2\0\1\1\1\0\1\1\3\0\1\32"+
    "\7\0\2\33\1\0\3\23\1\3\1\27\3\0\1\34"+
    "\1\30\2\0\1\1\1\0\1\1\5\0\1\35\2\0"+
    "\1\33\1\0\3\23\7\0\1\1\1\0\1\1\10\0"+
    "\1\23\1\36\3\23\3\0\1\37\4\0\1\1\1\0"+
    "\1\1\3\0\1\40\6\0\2\23\1\41\1\27\1\0"+
    "\1\27\1\0\1\27\1\30\1\0\1\30\1\0\1\30"+
    "\1\0\1\1\1\0\1\1\4\0\1\35\1\33\1\0"+
    "\1\33\1\0\1\33\2\23\1\0\1\27\4\0\1\30"+
    "\4\0\1\1\1\0\1\1\5\0\1\33\3\0\1\23"+
    "\3\0\1\27\3\0\1\30\1\0\2\42\1\1\6\0"+
    "\1\33\1\0\1\27\1\0\1\30\2\43\1\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0102"+
    "\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2"+
    "\0\u0102\0\u03dd\0\u0102\0\u0102\0\u0408\0\u0102\0\u0433\0\u045e"+
    "\0\u0489\0\u03b2\0\u04b4\0\u0408\0\u04df\0\u050a\0\u0102\0\u0102"+
    "\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0102\0\u0637"+
    "\0\u0102\0\u0662\0\u068d\0\u06b8\0\u0102\0\u06e3\0\u070e\0\u0739"+
    "\0\u0764\0\u078f\0\u0102\0\u07ba\0\u07e5\0\u0102\0\u0102\0\u0810"+
    "\0\u083b\0\u0866\0\u0891\0\u0306\0\u08bc\0\u0331\0\u08e7\0\u035c"+
    "\0\u0387\0\u0912\0\u03dd\0\u093d\0\u0968\0\u0408\0\u0993\0\u0433"+
    "\0\u09be\0\u045e\0\u0489\0\u09e9\0\u0102\0\u0a14\0\u0a3f\0\u0a6a"+
    "\0\u0a95\0\u0ac0\0\u0aeb\0\u0662\0\u068d\0\u0102\0\u0b16\0\u0b41"+
    "\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0739\0\u0c18\0\u0764\0\u07e5"+
    "\0\u0c43\0\u0c6e\0\u0c99\0\u0102\0\u0cc4\0\u035c\0\u0cef\0\u0d1a"+
    "\0\u0102\0\u0d45\0\u045e\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c"+
    "\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0102\0\u0ef3\0\u0f1e\0\u0f49"+
    "\0\u0764\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076"+
    "\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce"+
    "\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u0102"+
    "\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u0102\0\u1428"+
    "\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580"+
    "\0\u15ab\0\u0102\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad"+
    "\0\u16d8\0\u1703\0\u07ba\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da"+
    "\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932"+
    "\0\u195d\0\u1988\0\u19b3\0\u19de\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a"+
    "\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2"+
    "\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a"+
    "\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u1e92"+
    "\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf\0\u1fea"+
    "\0\u2015\0\u2040\0\u206b\0\u2096\0\u20c1\0\u20ec\0\u04df\0\u0102"+
    "\0\u2117\0\u2142\0\u216d\0\u2198\0\u21c3\0\u21ee\0\u2219\0\u2244"+
    "\0\u226f\0\u229a\0\u22c5\0\u22f0\0\u0102\0\u0662\0\u231b\0\u2346";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\16\1\17\47\16\1\20\1\21\1\20\1\22\1\20"+
    "\1\23\3\20\1\24\2\20\1\25\2\20\1\26\1\27"+
    "\1\30\1\20\1\23\15\21\1\31\1\20\5\21\1\20"+
    "\2\21\4\32\1\33\46\32\5\34\1\23\3\34\1\35"+
    "\1\34\1\36\1\37\2\34\1\40\1\41\1\42\1\34"+
    "\1\23\17\34\1\43\5\34\1\43\6\34\1\23\3\34"+
    "\1\44\1\34\1\36\1\37\2\34\1\40\1\41\1\42"+
    "\1\34\1\23\27\34\5\45\1\46\3\45\1\47\1\45"+
    "\1\50\5\45\1\42\1\45\1\46\16\45\1\51\1\52"+
    "\2\45\1\53\2\45\1\54\1\55\53\0\1\20\1\56"+
    "\2\20\1\33\2\20\1\57\13\20\1\60\15\56\2\20"+
    "\5\56\1\20\2\56\53\61\3\62\1\63\37\62\1\64"+
    "\5\62\1\64\1\62\3\65\1\66\47\65\6\34\1\67"+
    "\5\34\1\70\2\34\1\71\1\34\1\42\31\34\1\33"+
    "\1\72\3\33\1\23\15\33\1\23\15\72\2\33\5\72"+
    "\1\33\2\72\3\16\1\0\47\16\3\0\1\73\50\0"+
    "\2\21\7\0\1\21\11\0\15\21\2\0\5\21\1\0"+
    "\2\21\1\0\1\74\1\0\1\75\5\0\1\76\1\0"+
    "\1\77\10\0\1\100\6\74\1\101\4\74\1\102\2\0"+
    "\5\74\1\0\2\74\5\0\1\23\15\0\1\23\30\0"+
    "\1\103\7\0\1\104\12\0\15\103\2\0\5\103\1\0"+
    "\2\103\4\105\1\0\7\105\1\106\36\105\17\107\1\110"+
    "\33\107\17\111\1\112\1\34\32\111\21\0\1\113\1\114"+
    "\30\0\4\32\1\0\46\32\1\0\1\115\7\0\1\116"+
    "\12\0\15\115\2\0\5\115\1\0\2\115\4\117\1\0"+
    "\7\117\1\120\36\117\17\121\1\122\33\121\17\123\1\124"+
    "\1\125\32\123\43\0\1\126\5\0\1\126\1\0\11\45"+
    "\1\0\1\45\1\0\5\45\1\0\20\45\1\0\6\45"+
    "\2\0\5\45\1\46\3\45\1\0\1\45\1\0\5\45"+
    "\1\0\1\45\1\46\16\45\1\0\6\45\13\0\1\127"+
    "\1\0\1\127\37\0\11\45\1\0\1\45\1\0\5\45"+
    "\1\0\20\45\1\0\1\130\5\45\1\131\1\0\11\45"+
    "\1\0\1\45\1\0\5\45\1\0\20\45\1\0\4\45"+
    "\1\132\1\45\45\0\1\131\5\0\1\131\50\0\1\133"+
    "\4\0\2\56\7\0\1\56\11\0\15\56\2\0\5\56"+
    "\1\0\2\56\23\0\1\60\27\0\3\134\1\135\52\134"+
    "\1\135\7\134\1\136\42\134\1\135\37\134\1\137\5\134"+
    "\1\137\1\134\24\0\1\140\6\0\1\141\20\0\1\142"+
    "\4\0\1\143\15\0\15\142\2\0\5\142\1\0\2\142"+
    "\4\144\1\0\7\144\1\145\36\144\17\146\1\147\33\146"+
    "\1\0\2\72\7\0\1\72\11\0\15\72\2\0\5\72"+
    "\1\0\2\72\1\0\2\74\7\0\1\74\11\0\15\74"+
    "\2\0\5\74\1\0\2\74\1\0\1\74\1\0\1\150"+
    "\20\0\15\74\2\0\5\74\1\0\2\74\1\0\2\74"+
    "\7\0\1\74\11\0\1\74\1\151\13\74\2\0\5\74"+
    "\1\0\2\74\1\0\2\74\7\0\1\74\11\0\5\74"+
    "\1\152\7\74\2\0\5\74\1\0\2\74\1\0\2\74"+
    "\7\0\1\74\11\0\2\74\1\153\12\74\2\0\5\74"+
    "\1\0\2\74\1\0\2\103\7\0\1\103\1\154\10\0"+
    "\15\103\2\0\5\103\1\0\2\103\4\105\1\0\7\105"+
    "\1\0\1\155\35\105\16\0\1\107\1\156\33\0\4\111"+
    "\1\0\46\111\22\157\1\160\30\157\1\0\2\115\7\0"+
    "\1\115\1\161\10\0\15\115\2\0\5\115\1\0\2\115"+
    "\4\117\1\0\7\117\1\0\1\162\35\117\16\0\1\121"+
    "\1\163\33\0\4\123\1\0\46\123\24\0\1\164\70\0"+
    "\1\34\10\0\11\45\1\0\1\45\1\0\5\45\1\0"+
    "\20\45\1\0\1\45\1\165\4\45\46\0\1\166\6\0"+
    "\11\45\1\0\1\45\1\0\5\45\1\0\16\45\1\167"+
    "\1\45\1\0\6\45\42\0\1\170\12\0\3\134\1\135"+
    "\20\134\1\171\26\134\25\0\1\172\56\0\1\173\22\0"+
    "\2\142\4\0\1\174\1\175\1\0\1\142\11\0\15\142"+
    "\2\0\5\142\1\0\2\142\1\0\1\142\4\0\1\176"+
    "\15\0\7\142\1\177\5\142\2\0\5\142\1\0\2\142"+
    "\4\144\1\0\7\144\1\0\1\200\35\144\16\0\1\146"+
    "\1\201\34\0\2\74\7\0\1\74\11\0\1\202\14\74"+
    "\2\0\5\74\1\0\2\74\1\0\2\74\7\0\1\74"+
    "\11\0\10\74\1\203\4\74\2\0\5\74\1\0\2\74"+
    "\1\0\2\74\7\0\1\74\11\0\12\74\1\204\2\74"+
    "\2\0\5\74\1\0\2\74\4\105\1\0\4\105\1\205"+
    "\2\105\1\106\1\155\1\206\34\105\22\157\1\207\30\157"+
    "\21\0\1\210\1\160\30\0\4\117\1\0\4\117\1\211"+
    "\2\117\1\120\1\162\1\212\34\117\25\0\1\213\25\0"+
    "\11\45\1\0\1\45\1\0\5\45\1\0\11\45\1\214"+
    "\6\45\1\0\6\45\35\0\1\215\17\0\11\45\1\0"+
    "\1\45\1\0\5\45\1\0\5\45\1\216\12\45\1\0"+
    "\6\45\31\0\1\217\23\0\3\134\1\135\21\134\1\220"+
    "\25\134\24\0\1\221\62\0\1\222\17\0\1\142\3\0"+
    "\1\223\1\0\1\174\13\0\1\223\15\142\2\0\5\142"+
    "\1\0\2\142\1\0\1\142\4\0\1\176\15\0\15\142"+
    "\2\0\5\142\1\0\2\142\1\0\2\142\4\0\1\174"+
    "\1\175\1\0\1\142\11\0\5\142\1\224\7\142\2\0"+
    "\5\142\1\0\2\142\4\144\1\0\4\144\1\225\2\144"+
    "\1\145\1\200\1\226\34\144\1\0\2\74\7\0\1\74"+
    "\11\0\2\74\1\227\12\74\2\0\5\74\1\0\2\74"+
    "\1\0\2\74\6\0\1\230\1\74\1\77\10\0\2\74"+
    "\1\231\6\74\1\232\3\74\2\0\5\74\1\0\2\74"+
    "\1\0\2\74\7\0\1\74\11\0\2\74\1\233\12\74"+
    "\2\0\5\74\1\0\2\74\4\105\1\0\4\105\1\205"+
    "\1\234\1\105\1\0\1\155\41\105\1\0\1\235\6\105"+
    "\1\0\1\155\1\206\1\105\1\236\2\105\1\235\27\105"+
    "\21\157\1\210\1\207\30\157\4\0\1\237\16\0\1\210"+
    "\27\0\4\117\1\0\4\117\1\211\1\240\1\117\1\0"+
    "\1\162\41\117\1\0\1\241\6\117\1\0\1\162\1\212"+
    "\1\117\1\242\2\117\1\241\27\117\24\0\1\243\26\0"+
    "\11\45\1\0\1\45\1\0\5\45\1\0\20\45\1\0"+
    "\2\45\1\244\3\45\47\0\1\245\5\0\11\45\1\0"+
    "\1\45\1\0\5\45\1\0\16\45\1\246\1\45\1\0"+
    "\6\45\42\0\1\247\12\0\3\134\1\135\20\134\1\250"+
    "\26\134\26\0\1\251\37\0\1\252\12\0\1\253\6\0"+
    "\1\254\16\0\1\142\3\0\1\223\15\0\1\223\15\142"+
    "\2\0\5\142\1\0\2\142\1\0\2\142\4\0\1\174"+
    "\1\175\1\0\1\142\11\0\10\142\1\255\4\142\2\0"+
    "\5\142\1\0\2\142\4\144\1\0\4\144\1\225\1\256"+
    "\1\144\1\0\1\200\41\144\1\0\1\257\6\144\1\0"+
    "\1\200\1\226\1\144\1\260\2\144\1\257\27\144\1\0"+
    "\2\74\6\0\1\230\1\74\1\77\10\0\2\74\1\231"+
    "\12\74\2\0\5\74\1\0\2\74\1\0\2\74\7\0"+
    "\1\74\11\0\3\74\1\261\11\74\2\0\5\74\1\0"+
    "\2\74\1\0\2\74\7\0\1\74\11\0\12\74\1\262"+
    "\2\74\2\0\5\74\1\0\2\74\1\0\2\74\7\0"+
    "\1\74\11\0\7\74\1\263\5\74\2\0\5\74\1\0"+
    "\2\74\4\105\1\0\5\105\1\234\1\264\1\0\1\155"+
    "\41\105\1\0\1\235\6\105\1\0\1\155\2\105\1\236"+
    "\2\105\1\235\27\105\4\236\1\265\7\236\1\265\1\266"+
    "\1\236\1\267\1\270\32\236\4\117\1\0\5\117\1\240"+
    "\1\271\1\0\1\162\41\117\1\0\1\241\6\117\1\0"+
    "\1\162\2\117\1\242\2\117\1\241\27\117\4\242\1\272"+
    "\7\242\1\272\1\273\1\242\1\274\1\275\32\242\26\0"+
    "\1\276\24\0\11\45\1\0\1\45\1\0\5\45\1\0"+
    "\2\45\1\277\15\45\1\0\6\45\26\0\1\300\26\0"+
    "\11\45\1\0\1\45\1\0\5\45\1\0\4\45\1\301"+
    "\13\45\1\0\6\45\30\0\1\302\24\0\3\134\1\135"+
    "\22\134\1\303\24\134\13\0\1\252\12\0\1\253\53\0"+
    "\1\304\61\0\1\305\15\0\2\142\4\0\1\174\1\306"+
    "\1\0\1\142\11\0\15\142\2\0\5\142\1\0\2\142"+
    "\4\144\1\0\5\144\1\256\1\307\1\0\1\200\41\144"+
    "\1\0\1\257\6\144\1\0\1\200\2\144\1\260\2\144"+
    "\1\257\27\144\4\260\1\310\7\260\1\310\1\311\1\260"+
    "\1\312\1\313\32\260\1\0\2\74\7\0\1\74\11\0"+
    "\4\74\1\314\10\74\2\0\5\74\1\0\2\74\1\0"+
    "\2\74\7\0\1\74\11\0\13\74\1\315\1\74\2\0"+
    "\5\74\1\0\2\74\4\105\1\0\7\105\1\106\1\155"+
    "\1\206\34\105\17\265\1\316\1\317\32\265\4\236\1\265"+
    "\4\236\1\320\2\236\1\321\1\266\1\322\1\267\1\270"+
    "\36\236\1\0\7\236\1\265\1\266\35\236\4\105\1\0"+
    "\7\105\1\0\1\155\1\206\34\105\4\117\1\0\7\117"+
    "\1\120\1\162\1\212\34\117\17\272\1\323\1\324\32\272"+
    "\4\242\1\272\4\242\1\325\2\242\1\326\1\273\1\327"+
    "\1\274\1\275\36\242\1\0\7\242\1\272\1\273\35\242"+
    "\4\117\1\0\7\117\1\0\1\162\1\212\34\117\24\0"+
    "\1\330\26\0\11\45\1\0\1\45\1\0\5\45\1\0"+
    "\3\45\1\331\14\45\1\0\6\45\27\0\1\332\25\0"+
    "\11\45\1\0\1\45\1\0\5\45\1\0\14\45\1\333"+
    "\3\45\1\0\6\45\40\0\1\334\14\0\3\134\1\135"+
    "\20\134\1\335\26\134\30\0\1\336\61\0\1\337\23\0"+
    "\1\175\42\0\4\144\1\0\7\144\1\145\1\200\1\226"+
    "\34\144\17\310\1\340\1\341\32\310\4\260\1\310\4\260"+
    "\1\342\2\260\1\343\1\311\1\344\1\312\1\313\36\260"+
    "\1\0\7\260\1\310\1\311\35\260\4\144\1\0\7\144"+
    "\1\0\1\200\1\226\34\144\1\0\2\74\7\0\1\74"+
    "\11\0\5\74\1\345\7\74\2\0\5\74\1\0\2\74"+
    "\1\0\2\74\6\0\1\230\1\74\1\77\10\0\15\74"+
    "\2\0\5\74\1\0\2\74\4\265\1\0\46\265\16\0"+
    "\1\346\34\0\4\236\1\265\4\236\1\320\1\347\1\236"+
    "\1\265\1\266\1\236\1\267\1\270\36\236\1\265\7\236"+
    "\1\321\2\236\1\267\1\270\36\236\1\265\1\350\6\236"+
    "\1\265\1\266\1\322\1\267\1\351\2\236\1\350\27\236"+
    "\4\272\1\0\46\272\16\0\1\352\34\0\4\242\1\272"+
    "\4\242\1\325\1\353\1\242\1\272\1\273\1\242\1\274"+
    "\1\275\36\242\1\272\7\242\1\326\2\242\1\274\1\275"+
    "\36\242\1\272\1\354\6\242\1\272\1\273\1\327\1\274"+
    "\1\355\2\242\1\354\27\242\36\0\1\356\14\0\5\45"+
    "\1\331\3\45\1\0\1\45\1\0\5\45\1\0\1\45"+
    "\1\331\16\45\1\0\5\45\1\357\7\0\1\332\15\0"+
    "\1\332\24\0\1\360\2\0\11\45\1\0\1\45\1\0"+
    "\5\45\1\0\4\45\1\361\13\45\1\0\6\45\30\0"+
    "\1\362\24\0\3\134\1\135\32\134\1\363\14\134\31\0"+
    "\1\364\34\0\1\252\37\0\4\310\1\0\46\310\16\0"+
    "\1\365\34\0\4\260\1\310\4\260\1\342\1\366\1\260"+
    "\1\310\1\311\1\260\1\312\1\313\36\260\1\310\7\260"+
    "\1\343\2\260\1\312\1\313\36\260\1\310\1\367\6\260"+
    "\1\310\1\311\1\344\1\312\1\370\2\260\1\367\27\260"+
    "\1\0\2\74\7\0\1\74\11\0\6\74\1\315\6\74"+
    "\2\0\5\74\1\0\2\74\5\0\1\371\10\0\1\346"+
    "\1\0\1\265\2\0\1\371\27\0\4\236\1\265\5\236"+
    "\1\347\1\372\1\265\1\266\1\236\1\267\1\270\36\236"+
    "\1\265\1\350\6\236\1\265\1\266\1\236\1\267\1\351"+
    "\2\236\1\350\33\236\1\265\7\236\1\265\1\266\1\322"+
    "\1\267\1\270\32\236\5\0\1\373\10\0\1\352\1\0"+
    "\1\272\2\0\1\373\27\0\4\242\1\272\5\242\1\353"+
    "\1\374\1\272\1\273\1\242\1\274\1\275\36\242\1\272"+
    "\1\354\6\242\1\272\1\273\1\242\1\274\1\355\2\242"+
    "\1\354\33\242\1\272\7\242\1\272\1\273\1\327\1\274"+
    "\1\275\32\242\37\0\1\375\13\0\11\45\1\0\1\45"+
    "\1\0\5\45\1\0\11\45\1\331\6\45\1\0\6\45"+
    "\35\0\1\332\17\0\3\134\1\135\33\134\1\376\13\134"+
    "\32\0\1\337\25\0\1\377\10\0\1\365\1\0\1\310"+
    "\2\0\1\377\27\0\4\260\1\310\5\260\1\366\1\u0100"+
    "\1\310\1\311\1\260\1\312\1\313\36\260\1\310\1\367"+
    "\6\260\1\310\1\311\1\260\1\312\1\370\2\260\1\367"+
    "\33\260\1\310\7\260\1\310\1\311\1\344\1\312\1\313"+
    "\32\260\5\0\1\371\12\0\1\265\2\0\1\371\27\0"+
    "\4\236\1\265\7\236\1\321\1\266\1\322\1\267\1\270"+
    "\32\236\5\0\1\373\12\0\1\272\2\0\1\373\27\0"+
    "\4\242\1\272\7\242\1\326\1\273\1\327\1\274\1\275"+
    "\32\242\5\0\1\377\12\0\1\310\2\0\1\377\27\0"+
    "\4\260\1\310\7\260\1\343\1\311\1\344\1\312\1\313"+
    "\32\260";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9073];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\10\6\0\2\1\1\11\10\1\1\11\1\1"+
    "\2\11\1\1\1\11\10\1\2\11\6\1\1\11\1\1"+
    "\1\11\3\1\1\11\5\1\1\11\2\1\2\11\3\1"+
    "\4\0\2\1\10\0\2\1\2\0\1\11\2\0\1\1"+
    "\1\0\1\1\3\0\1\11\7\0\2\1\1\0\3\1"+
    "\1\11\1\1\3\0\1\11\1\1\2\0\1\1\1\0"+
    "\1\1\5\0\1\11\2\0\1\1\1\0\3\1\7\0"+
    "\1\1\1\0\1\1\10\0\1\1\1\11\3\1\3\0"+
    "\1\11\4\0\1\1\1\0\1\1\3\0\1\11\6\0"+
    "\4\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\4\0\2\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\4\0\1\1\4\0"+
    "\1\1\1\0\1\1\5\0\1\1\3\0\1\1\3\0"+
    "\1\1\3\0\1\1\1\0\1\1\1\11\1\1\6\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */
    private ByteStack stack = new ByteStack();
    private LexerInput input;
    private int pushBackCount = 0;
    private int curlyBalance = 0;
    private int curlyBalanceExpr = 0;
    private boolean hasExpression = false;
    private boolean inExpression = false;
    private String expression; 

    public JflexColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            //initial state
            stack.push(YYINITIAL);
            zzState = YYINITIAL;
            zzLexicalState = YYINITIAL;
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;

        LexerState(ByteStack stack, int zzState, int zzLexicalState) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }
            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                );
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    //other functions

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JflexColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JflexColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1752) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JflexTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();
            
            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { if (!inExpression){
        expression = yytext();
        hasExpression = true;
    }
    
    return JflexTokenId.T_JFLEX_MACRO;
          }
        case 36: break;
        case 30: 
          { pushState(ST_JFLEX_CODEVAL_OPTION);
    return JflexTokenId.T_JFLEX_CLASS_CODE_TAG;
          }
        case 37: break;
        case 35: 
          { return JflexTokenId.T_JFLEX_LEXICAL_STATE_TAG;
          }
        case 38: break;
        case 29: 
          { pushState(ST_JFLEX_STATE_LEXICAL_RULE);
    curlyBalance = 0;
    curlyBalanceExpr = 0;
    hasExpression = false;
    inExpression = false;
    expression = "";
    return JflexTokenId.T_JFLEX_LEXICAL_STATE_TAG;
          }
        case 39: break;
        case 22: 
          { return JflexTokenId.T_JFLEX_CLASS_CODE_TAG;
          }
        case 40: break;
        case 15: 
          { pushState(ST_JFLEX_OPTIONS_AND_DECLARATIONS);
          }
        case 41: break;
        case 33: 
          { pushState(ST_JFLEX_STATE_DEFINE);
    return JflexTokenId.T_JFLEX_OPTION;
          }
        case 42: break;
        case 8: 
          { if (hasExpression){
        curlyBalanceExpr = 1;
        pushState(ST_JFLEX_STATE_LEXICAL_RULE_CODE);
    } else {
        inExpression = true;
        curlyBalance++;
        pushState(ST_JFLEX_STATE_LEXICAL_RULE_LIST);
    }
    return JflexTokenId.T_JAVA;
          }
        case 43: break;
        case 18: 
          { pushState(ST_JFLEX_OPTIONS_AND_DECLARATIONS);
    return JflexTokenId.T_JFLEX_DECL_WRAPPER_TAG;
          }
        case 44: break;
        case 3: 
          { return JflexTokenId.T_JFLEX_MACRO;
          }
        case 45: break;
        case 9: 
          { curlyBalance--;
    if(curlyBalance <=0){
        pushState(ST_JFLEX_LEXICAL_RULES);
    }
    return JflexTokenId.T_JAVA;
          }
        case 46: break;
        case 32: 
          { popState();
    return JflexTokenId.T_JFLEX_CLASS_CODE_TAG;
          }
        case 47: break;
        case 12: 
          { curlyBalanceExpr--;
    if(curlyBalanceExpr <=0){
        popState();
        if (hasExpression){
            pushState(ST_JFLEX_LEXICAL_RULES);
        }
    }
    return JflexTokenId.T_JAVA;
          }
        case 48: break;
        case 2: 
          { return  JflexTokenId.T_JAVA;
          }
        case 49: break;
        case 11: 
          { curlyBalanceExpr++;
    return JflexTokenId.T_JAVA;
          }
        case 50: break;
        case 27: 
          { pushState(ST_JFLEX_STATE_LEXICAL_RULE);
    hasExpression = true;
    return JflexTokenId.T_JFLEX_REGEX_EXPRESSION;
          }
        case 51: break;
        case 16: 
          { //popState();
    //yypushback("%eofval}".length());
    return JflexTokenId.T_JAVA;
          }
        case 52: break;
        case 31: 
          { yypushback(1);
    return JflexTokenId.T_JAVA;
          }
        case 53: break;
        case 20: 
          { pushState(ST_JFLEX_LEXICAL_RULES);
    return JflexTokenId.T_JFLEX_DECL_WRAPPER_TAG;
          }
        case 54: break;
        case 1: 
          { return JflexTokenId.T_JAVA;
          }
        case 55: break;
        case 26: 
          { popState();
    yypushback(2);
    return JflexTokenId.T_JAVA;
          }
        case 56: break;
        case 14: 
          { return JflexTokenId.T_JFLEX_COMMA;
          }
        case 57: break;
        case 13: 
          { //pushState(ST_JFLEX_OPTIONS_AND_DECLARATIONS);
    return JflexTokenId.T_JFLEX_STATE_NAME;
          }
        case 58: break;
        case 5: 
          { //pushState(YYINITIAL);
    return JflexTokenId.T_JAVA;
          }
        case 59: break;
        case 17: 
          { popState();
    return JflexTokenId.T_JFLEX_STATE_NAME;
          }
        case 60: break;
        case 19: 
          { pushState(ST_JFLEX_LOOKING_FOR_OPTION_PARAM);
    return JflexTokenId.T_JFLEX_OPTION;
          }
        case 61: break;
        case 7: 
          { popState();
    return JflexTokenId.T_JAVA;
          }
        case 62: break;
        case 21: 
          { pushState(ST_JFLEX_LEXER_USERCODE);
    return JflexTokenId.T_JFLEX_CLASS_CODE_TAG;
          }
        case 63: break;
        case 10: 
          { curlyBalanceExpr = 1;
    pushState(ST_JFLEX_STATE_LEXICAL_RULE_CODE);
    return JflexTokenId.T_JAVA;
          }
        case 64: break;
        case 23: 
          { return JflexTokenId.T_JFLEX_REGEX_EXPRESSION;
          }
        case 65: break;
        case 4: 
          { return JflexTokenId.T_WHITESPACE;
          }
        case 66: break;
        case 24: 
          { if (!inExpression){
        expression = yytext();
        hasExpression = true;
    }
    
    return JflexTokenId.T_JFLEX_REGEX_EXPRESSION;
          }
        case 67: break;
        case 25: 
          { if (!inExpression){
        expression = yytext();
        hasExpression = true;
    }
    return JflexTokenId.T_JAVA;
          }
        case 68: break;
        case 34: 
          { pushState(ST_JFLEX_LOOKING_FOR_LABEL);
    return JflexTokenId.T_JAVA;
          }
        case 69: break;
        case 6: 
          { return JflexTokenId.T_TILDA;
          }
        case 70: break;
        default: 
          if (zzInput == YYEOF) 
            //zzAtEOF = true;
              {         if(input.readLength() > 0) {
            String yytext = yytext();
            // backup eof
            input.backup(1);
            //and return the text as error token
             return JflexTokenId.T_JAVA;
        } else {
            return null;
        }
 }
          
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
