/* The following code was generated by JFlex 1.4.3 on 12/10/22 3:21 PM */

   /*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */

package org.netbeans.modules.jflex.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.jflex.editor.common.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/10/22 3:21 PM from the specification file
 * <tt>C:/Users/bhaidu.PENTALOG/Documents/NetBeansProjects/JflexEditor/tools/JflexColoringLexer.flex</tt>
 */
public class JflexColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_JFLEX_TAG = 22;
  public static final int ST_JFLEX_LEXER_USERCODE = 28;
  public static final int ST_JFLEX_STATE_LEXICAL_RULE_LIST = 16;
  public static final int ST_JFLEX_LEXICAL_RULES = 32;
  public static final int ST_JFLEX_STATE_RULE_CONDITION = 12;
  public static final int ST_JFLEX_MACRO_DEFINITION = 8;
  public static final int ST_JFLEX_CODEVAL_OPTION = 30;
  public static final int ST_JFLEX_LOOKING_FOR_RULE_CODE = 20;
  public static final int ST_JFLEX_LOOKING_FOR_OPTION_PARAM = 4;
  public static final int ST_JFLEX_STATE_LEXICAL_RULE = 10;
  public static final int ST_JFLEX_STATE_LEXICAL_RULE_CODE = 18;
  public static final int ST_JFLEX_STATE_DEFINE = 24;
  public static final int ST_JFLEX_LOOKING_FOR_LABEL = 34;
  public static final int ST_JFLEX_LOOKING_FOR_MACRO_DEFINITION = 6;
  public static final int ST_JFLEX_REGEX_DEFINE = 26;
  public static final int ST_JFLEX_OPTIONS_AND_DECLARATIONS = 2;
  public static final int YYINITIAL = 0;
  public static final int ST_JFLEX_STATE_LEXICAL_RULE_GROUP = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9,  5,  5,  5,  5,  5,  5,  5,  5, 10, 10, 11, 11, 
    12, 12,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\0\1\5\23\0\1\62\1\20\1\32\2\0"+
    "\1\3\1\0\1\63\1\20\1\20\1\34\1\20\1\7\1\20\1\57"+
    "\1\33\12\15\1\20\1\31\1\6\1\61\1\10\1\30\1\0\1\53"+
    "\3\1\1\11\1\13\1\1\1\43\1\35\2\1\1\55\1\1\1\37"+
    "\1\12\2\1\1\45\1\1\1\41\1\1\1\51\1\47\3\1\1\17"+
    "\1\23\1\21\1\20\1\60\1\0\1\54\3\24\1\25\1\27\1\24"+
    "\1\44\1\36\2\24\1\56\1\24\1\40\1\26\2\24\1\46\1\24"+
    "\1\42\1\24\1\52\1\50\3\24\1\14\1\22\1\16\1\20\53\1"+
    "\1\1\12\1\1\1\4\1\1\1\5\1\27\1\1\1\37\1\1\1"+
    "\10\1\u01c2\1\4\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1"+
    "\201\0\5\1\1\0\2\1\2\0\4\1\10\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\24\1\1\0\123\1\1\0\213\1\10\0\236\1"+
    "\11\0\46\1\2\0\1\1\7\0\47\1\110\0\33\1\5\0\3\1"+
    "\55\0\53\1\25\0\12\2\4\0\2\1\1\0\143\1\1\0\1\1"+
    "\17\0\2\1\7\0\2\1\12\2\3\1\2\0\1\1\20\0\1\1"+
    "\1\0\36\1\35\0\131\1\13\0\1\1\16\0\12\2\41\1\11\0"+
    "\2\1\4\0\1\1\5\0\26\1\4\0\1\1\11\0\1\1\3\0"+
    "\1\1\27\0\31\1\107\0\1\1\1\0\13\1\127\0\66\1\3\0"+
    "\1\1\22\0\1\1\7\0\12\1\4\0\12\2\1\0\7\1\1\0"+
    "\7\1\5\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0"+
    "\3\1\4\0\12\2\2\1\23\0\6\1\4\0\2\1\2\0\26\1"+
    "\1\0\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0\4\1"+
    "\1\0\1\1\7\0\12\2\2\0\3\1\20\0\11\1\1\0\3\1"+
    "\1\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0\1\1"+
    "\22\0\1\1\17\0\2\1\4\0\12\2\25\0\10\1\2\0\2\1"+
    "\2\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0\1\1"+
    "\36\0\2\1\1\0\3\1\4\0\12\2\1\0\1\1\21\0\1\1"+
    "\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1"+
    "\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1\26\0\1\1"+
    "\25\0\12\2\25\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1"+
    "\1\0\5\1\3\0\1\1\32\0\2\1\6\0\2\1\4\0\12\2"+
    "\25\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1"+
    "\3\0\1\1\40\0\1\1\1\0\2\1\4\0\12\2\1\0\2\1"+
    "\22\0\10\1\1\0\3\1\1\0\51\1\2\0\1\1\20\0\1\1"+
    "\21\0\2\1\4\0\12\2\12\0\6\1\5\0\22\1\3\0\30\1"+
    "\1\0\11\1\1\0\1\1\2\0\7\1\72\0\60\1\1\0\2\1"+
    "\14\0\7\1\11\0\12\2\47\0\2\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0\2\1"+
    "\11\0\1\1\2\0\5\1\1\0\1\1\11\0\12\2\2\0\4\1"+
    "\40\0\1\1\37\0\12\2\26\0\10\1\1\0\44\1\33\0\5\1"+
    "\163\0\53\1\24\0\1\1\12\2\6\0\6\1\4\0\4\1\3\0"+
    "\1\1\3\0\2\1\7\0\3\1\4\0\15\1\14\0\1\1\1\0"+
    "\12\2\6\0\46\1\1\0\1\1\5\0\1\1\2\0\53\1\1\0"+
    "\u014d\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0"+
    "\51\1\1\0\4\1\2\0\41\1\1\0\4\1\2\0\7\1\1\0"+
    "\1\1\1\0\4\1\2\0\17\1\1\0\71\1\1\0\4\1\2\0"+
    "\103\1\45\0\20\1\20\0\125\1\14\0\u026c\1\2\0\21\1\1\0"+
    "\32\1\5\0\113\1\25\0\15\1\1\0\4\1\16\0\22\1\16\0"+
    "\22\1\16\0\15\1\1\0\3\1\17\0\64\1\43\0\1\1\4\0"+
    "\1\1\3\0\12\2\46\0\12\2\6\0\130\1\10\0\51\1\1\0"+
    "\1\1\5\0\106\1\12\0\35\1\51\0\12\2\36\1\2\0\5\1"+
    "\13\0\54\1\25\0\7\1\10\0\12\2\46\0\27\1\11\0\65\1"+
    "\53\0\12\2\6\0\12\2\15\0\1\1\135\0\57\1\21\0\7\1"+
    "\4\0\12\2\51\0\36\1\15\0\2\1\12\2\54\1\32\0\44\1"+
    "\34\0\12\2\3\0\3\1\12\2\44\1\153\0\4\1\1\0\4\1"+
    "\3\0\2\1\11\0\300\1\100\0\u0116\1\2\0\6\1\2\0\46\1"+
    "\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0\3\1"+
    "\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0\3\1"+
    "\1\0\7\1\164\0\1\1\15\0\1\1\20\0\15\1\145\0\1\1"+
    "\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0\4\1"+
    "\5\0\5\1\4\0\1\1\64\0\2\1\u0a7b\0\57\1\1\0\57\1"+
    "\1\0\205\1\6\0\4\1\3\0\2\1\14\0\46\1\1\0\1\1"+
    "\5\0\1\1\2\0\70\1\7\0\1\1\20\0\27\1\11\0\7\1"+
    "\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1"+
    "\1\0\7\1\1\0\7\1\120\0\1\1\u01d5\0\2\1\52\0\5\1"+
    "\5\0\2\1\4\0\126\1\6\0\3\1\1\0\132\1\1\0\4\1"+
    "\5\0\51\1\3\0\136\1\21\0\33\1\65\0\20\1\u0200\0\u19b6\1"+
    "\112\0\u51cd\1\63\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0\20\1"+
    "\12\2\2\1\24\0\57\1\20\0\31\1\10\0\106\1\61\0\11\1"+
    "\2\0\147\1\2\0\4\1\1\0\4\1\14\0\13\1\115\0\12\1"+
    "\1\0\3\1\1\0\4\1\1\0\27\1\35\0\64\1\16\0\62\1"+
    "\34\0\12\2\30\0\6\1\3\0\1\1\4\0\12\2\34\1\12\0"+
    "\27\1\31\0\35\1\7\0\57\1\34\0\1\1\12\2\46\0\51\1"+
    "\27\0\3\1\1\0\10\1\4\0\12\2\6\0\27\1\3\0\1\1"+
    "\5\0\60\1\1\0\1\1\3\0\2\1\2\0\5\1\2\0\1\1"+
    "\1\0\1\1\30\0\3\1\2\0\13\1\7\0\3\1\14\0\6\1"+
    "\2\0\6\1\2\0\6\1\11\0\7\1\1\0\7\1\221\0\43\1"+
    "\15\0\12\2\6\0\u2ba4\1\14\0\27\1\4\0\61\1\u2104\0\u016e\1"+
    "\2\0\152\1\46\0\7\1\14\0\5\1\5\0\1\1\1\0\12\1"+
    "\1\0\15\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0\14\1"+
    "\164\0\5\1\1\0\207\1\23\0\12\2\7\0\32\1\6\0\32\1"+
    "\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\2\2\1\3\1\2\1\4\1\5\1\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\2\1\11\1\6"+
    "\1\11\3\2\1\13\1\14\1\15\1\16\1\17\1\11"+
    "\1\20\1\21\1\22\1\2\2\23\3\2\1\24\1\2"+
    "\1\25\1\26\1\27\1\26\1\30\1\31\1\26\11\0"+
    "\2\14\2\0\1\32\5\0\1\33\7\0\2\26\1\34"+
    "\3\0\1\35\1\0\1\14\2\0\1\14\1\0\1\20"+
    "\2\0\1\20\5\0\1\36\2\0\2\26\1\0\1\34"+
    "\4\0\1\14\1\0\1\14\5\0\1\20\7\0\1\37"+
    "\3\26\1\34\11\0\1\14\4\0\1\40\5\0\2\26"+
    "\3\0\1\14\1\0\1\14\1\0\1\14\3\0\1\14"+
    "\1\41\5\0\1\42\1\36\2\26\4\0\1\14\3\0"+
    "\1\14\1\0\1\14\1\0\1\14\4\0\1\26\7\0"+
    "\1\14\1\0\1\14\15\0\1\14\3\0\1\14\1\0"+
    "\1\14\5\0\1\14\14\0\2\14\1\0\1\14\2\0"+
    "\1\14\2\0\1\14\6\0\1\14\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u0104"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0104\0\u0104"+
    "\0\u0104\0\u0104\0\u0444\0\u0478\0\u0104\0\u04ac\0\u04e0\0\u0514"+
    "\0\u0548\0\u0478\0\u0104\0\u0104\0\u0478\0\u0104\0\u03dc\0\u057c"+
    "\0\u0104\0\u0104\0\u05b0\0\u0104\0\u05e4\0\u0618\0\u064c\0\u0680"+
    "\0\u06b4\0\u06e8\0\u0104\0\u071c\0\u0750\0\u0784\0\u0104\0\u0104"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u0478\0\u08bc\0\u08f0"+
    "\0\u0924\0\u0958\0\u098c\0\u04e0\0\u0548\0\u09c0\0\u0104\0\u09f4"+
    "\0\u0a28\0\u0a5c\0\u0618\0\u064c\0\u0104\0\u0680\0\u0a90\0\u0ac4"+
    "\0\u0af8\0\u0b2c\0\u0b60\0\u0750\0\u0b94\0\u0bc8\0\u07ec\0\u0bfc"+
    "\0\u0c30\0\u0c64\0\u0104\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68"+
    "\0\u04e0\0\u09f4\0\u0d9c\0\u0dd0\0\u0104\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\u0bfc\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u0d9c\0\u127c\0\u12b0"+
    "\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u0104\0\u13e8\0\u141c"+
    "\0\u1450\0\u0104\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588"+
    "\0\u15bc\0\u15f0\0\u1624\0\u14b8\0\u1658\0\u168c\0\u16c0\0\u16f4"+
    "\0\u0104\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860"+
    "\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00"+
    "\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u0104\0\u1b04\0\u1b38\0\u1b6c"+
    "\0\u1ba0\0\u1bd4\0\u0104\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8"+
    "\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78"+
    "\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018"+
    "\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8"+
    "\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358"+
    "\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4\0\u20b4"+
    "\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25c8\0\u25fc\0\u2630"+
    "\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0"+
    "\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970"+
    "\0\u29a4\0\u29d8\0\u2a0c\0\u2a0c\0\u2a40\0\u2a74\0\u245c\0\u2aa8"+
    "\0\u2adc\0\u2aa8\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14"+
    "\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\16\1\17\60\16\1\20\1\21\1\20\1\22\1\23"+
    "\1\24\3\20\3\21\10\20\4\21\3\20\1\25\1\20"+
    "\22\21\1\20\1\21\1\20\1\24\2\20\1\26\2\20"+
    "\1\27\1\24\3\20\3\26\10\20\4\26\5\20\22\26"+
    "\1\20\1\26\1\20\1\24\6\20\1\24\53\20\1\30"+
    "\1\24\4\20\1\31\1\32\1\24\1\33\5\20\1\34"+
    "\1\35\1\31\1\36\3\31\1\37\4\40\1\31\1\35"+
    "\1\41\2\31\1\20\1\40\1\20\1\40\1\20\1\40"+
    "\1\20\1\40\1\20\1\40\1\20\1\40\1\20\1\40"+
    "\1\20\1\40\1\20\1\40\2\31\1\20\1\24\1\20"+
    "\64\0\3\20\1\31\1\23\1\24\1\33\5\20\1\42"+
    "\1\35\1\31\1\36\3\31\1\37\4\40\1\31\1\35"+
    "\1\41\2\31\1\20\1\40\1\20\1\40\1\20\1\40"+
    "\1\20\1\40\1\20\1\40\1\20\1\40\1\20\1\40"+
    "\1\20\1\40\1\20\1\40\1\43\1\31\1\20\1\24"+
    "\5\20\1\23\1\24\6\20\1\44\16\20\1\25\26\20"+
    "\1\24\4\20\1\31\1\23\1\24\6\20\1\45\1\20"+
    "\1\46\1\36\3\31\1\37\4\20\1\31\1\20\1\41"+
    "\1\47\1\31\22\20\1\43\1\31\1\20\1\24\1\20"+
    "\14\50\1\51\1\50\1\52\14\50\1\53\1\54\26\50"+
    "\1\55\3\56\1\57\60\56\3\60\1\61\60\60\4\20"+
    "\1\23\1\24\1\62\24\20\1\25\26\20\1\24\1\20"+
    "\3\16\1\0\60\16\3\0\1\63\61\0\2\21\6\0"+
    "\3\21\1\0\1\21\6\0\4\21\5\0\22\21\1\0"+
    "\1\21\4\0\1\64\1\0\1\65\5\0\1\66\2\64"+
    "\1\67\1\0\1\70\5\0\1\64\1\66\2\64\5\0"+
    "\2\71\20\64\1\0\1\64\7\0\1\23\64\0\1\24"+
    "\54\0\1\24\34\0\1\72\1\73\30\0\2\26\6\0"+
    "\3\26\1\0\1\26\6\0\4\26\5\0\22\26\1\0"+
    "\1\26\11\0\1\74\56\0\1\75\7\0\3\75\1\76"+
    "\7\0\4\75\5\0\22\75\1\0\1\75\3\0\4\77"+
    "\1\0\12\77\1\100\3\77\1\101\6\77\1\102\31\77"+
    "\4\103\1\0\16\103\1\104\40\103\30\0\1\35\33\0"+
    "\4\105\1\0\16\105\1\106\6\105\1\107\31\105\14\50"+
    "\1\0\1\50\1\0\14\50\2\0\26\50\34\0\1\110"+
    "\1\111\43\0\1\112\1\0\1\112\45\0\3\113\1\114"+
    "\63\113\1\114\12\113\1\115\45\113\3\116\1\117\60\116"+
    "\11\0\1\120\13\0\1\120\7\0\2\121\26\0\1\122"+
    "\4\0\1\123\2\0\3\122\10\0\4\122\5\0\22\122"+
    "\1\0\1\122\4\0\2\64\6\0\3\64\1\0\1\64"+
    "\6\0\4\64\5\0\22\64\1\0\1\64\4\0\1\64"+
    "\1\0\1\124\5\0\3\64\10\0\4\64\5\0\22\64"+
    "\1\0\1\64\4\0\2\64\6\0\1\64\1\125\1\64"+
    "\1\0\1\64\6\0\2\64\1\125\1\64\5\0\22\64"+
    "\1\0\1\64\4\0\2\64\6\0\3\64\1\0\1\64"+
    "\6\0\4\64\5\0\2\64\2\126\16\64\1\0\1\64"+
    "\3\0\4\127\1\0\57\127\34\130\1\131\27\130\11\0"+
    "\1\132\13\0\1\132\37\0\2\75\6\0\3\75\1\0"+
    "\1\75\1\133\5\0\4\75\5\0\22\75\1\0\1\75"+
    "\3\0\4\77\1\0\12\77\1\134\1\77\1\135\1\77"+
    "\1\101\6\77\1\102\31\77\4\136\1\0\12\136\1\100"+
    "\44\136\4\77\1\0\12\77\1\137\1\77\1\135\1\77"+
    "\1\101\40\77\4\102\1\0\12\102\1\0\1\102\1\140"+
    "\42\102\22\0\1\103\1\141\40\0\4\105\1\0\57\105"+
    "\4\142\1\0\57\142\34\143\1\144\27\143\63\0\1\145"+
    "\3\116\1\117\5\116\1\146\13\116\1\146\7\116\2\147"+
    "\25\116\12\0\1\150\13\0\1\150\74\0\2\151\24\0"+
    "\2\122\4\0\1\152\1\153\3\122\1\0\1\122\6\0"+
    "\4\122\5\0\22\122\1\0\1\122\4\0\1\122\4\0"+
    "\1\154\2\0\1\155\2\122\10\0\1\122\1\155\2\122"+
    "\5\0\22\122\1\0\1\122\4\0\2\64\6\0\2\64"+
    "\1\156\1\0\1\64\6\0\3\64\1\156\5\0\22\64"+
    "\1\0\1\64\4\0\2\64\6\0\3\64\1\0\1\64"+
    "\6\0\4\64\5\0\2\157\20\64\1\0\1\64\3\0"+
    "\34\130\1\160\62\130\1\161\1\131\27\130\12\0\1\162"+
    "\13\0\1\162\35\0\4\163\1\0\12\163\1\134\44\163"+
    "\4\77\1\0\7\77\1\164\2\77\1\100\1\77\1\135"+
    "\1\165\1\101\6\77\1\102\31\77\4\136\1\0\12\136"+
    "\1\0\1\136\1\166\42\136\4\167\1\0\12\167\1\134"+
    "\1\167\1\170\1\167\1\171\6\167\1\163\31\167\4\102"+
    "\1\0\7\102\1\172\2\102\1\173\1\102\1\140\1\174"+
    "\41\102\34\143\1\175\62\143\1\176\1\144\27\143\3\116"+
    "\1\117\6\116\1\177\13\116\1\177\40\116\1\117\33\116"+
    "\2\200\23\116\13\0\1\201\13\0\1\201\71\0\2\202"+
    "\26\0\1\122\3\0\1\203\1\0\1\152\1\0\3\122"+
    "\10\0\4\122\5\0\22\122\1\0\1\122\1\0\1\203"+
    "\6\0\1\204\54\0\1\204\2\0\1\122\4\0\1\154"+
    "\2\0\3\122\10\0\4\122\5\0\22\122\1\0\1\122"+
    "\4\0\2\122\4\0\1\152\1\153\1\122\1\205\1\122"+
    "\1\0\1\122\6\0\2\122\1\205\1\122\5\0\22\122"+
    "\1\0\1\122\4\0\2\64\6\0\3\64\1\206\1\64"+
    "\6\0\4\64\5\0\4\64\2\207\6\64\2\210\4\64"+
    "\1\0\1\64\4\0\2\64\6\0\3\64\1\0\1\64"+
    "\6\0\4\64\5\0\4\64\2\211\14\64\1\0\1\64"+
    "\3\0\33\130\1\212\1\160\27\130\13\0\1\213\13\0"+
    "\1\213\34\0\4\163\1\0\12\163\1\0\1\163\1\214"+
    "\42\163\4\77\1\0\7\77\1\164\1\215\1\77\1\134"+
    "\1\77\1\135\1\77\1\101\6\77\1\102\35\77\1\0"+
    "\1\216\11\77\1\134\1\77\1\135\1\165\1\101\6\77"+
    "\1\217\27\77\1\216\1\77\4\220\1\0\7\220\1\221"+
    "\2\220\1\100\1\220\1\166\1\222\1\223\6\220\1\136"+
    "\31\220\4\167\1\0\12\167\1\134\1\167\1\224\1\167"+
    "\1\171\6\167\1\163\35\167\1\0\12\167\1\137\1\167"+
    "\1\224\1\167\1\171\40\167\4\102\1\0\7\102\1\172"+
    "\1\225\1\102\1\0\1\102\1\140\46\102\1\0\12\102"+
    "\1\173\50\102\1\0\1\226\11\102\1\0\1\102\1\140"+
    "\1\174\7\102\1\217\27\102\1\226\1\102\33\143\1\145"+
    "\1\175\27\143\3\116\1\117\7\116\1\227\13\116\1\227"+
    "\37\116\1\117\31\116\2\230\25\116\16\0\1\231\22\0"+
    "\2\232\6\0\2\233\52\0\2\234\22\0\1\122\3\0"+
    "\1\203\3\0\3\122\10\0\4\122\5\0\22\122\1\0"+
    "\1\122\1\0\1\203\6\0\1\204\6\0\1\235\45\0"+
    "\1\204\2\0\2\122\4\0\1\152\1\153\2\122\1\236"+
    "\1\0\1\122\6\0\3\122\1\236\5\0\22\122\1\0"+
    "\1\122\4\0\2\64\6\0\3\64\1\0\1\64\6\0"+
    "\4\64\5\0\6\64\2\237\12\64\1\0\1\64\4\0"+
    "\2\64\6\0\3\64\1\0\1\64\6\0\4\64\5\0"+
    "\16\64\2\240\2\64\1\0\1\64\4\0\2\64\6\0"+
    "\3\64\1\206\1\64\6\0\4\64\5\0\4\64\2\207"+
    "\14\64\1\0\1\64\13\0\1\241\53\0\4\167\1\0"+
    "\7\167\1\242\2\167\1\134\1\167\1\224\1\243\1\171"+
    "\6\167\1\163\31\167\4\77\1\0\10\77\1\215\1\244"+
    "\1\134\1\77\1\135\1\77\1\101\6\77\1\102\35\77"+
    "\1\0\1\216\11\77\1\134\1\77\1\135\1\77\1\101"+
    "\6\77\1\217\27\77\1\216\1\77\4\217\1\245\12\217"+
    "\1\245\1\217\1\246\1\217\1\247\6\217\1\250\31\217"+
    "\4\220\1\0\12\220\1\134\1\220\1\166\1\220\1\223"+
    "\6\220\1\136\35\220\1\0\7\220\1\221\1\251\1\220"+
    "\1\134\1\220\1\166\1\220\1\223\6\220\1\136\35\220"+
    "\1\0\1\252\11\220\1\134\1\220\1\166\1\222\1\223"+
    "\6\220\1\253\27\220\1\252\5\220\1\0\12\220\1\137"+
    "\1\220\1\166\1\220\1\223\40\220\4\102\1\0\10\102"+
    "\1\225\1\254\1\0\1\102\1\140\46\102\1\0\1\226"+
    "\11\102\1\0\1\102\1\140\10\102\1\217\27\102\1\226"+
    "\1\102\16\0\1\255\22\0\2\256\6\0\2\257\11\0"+
    "\3\116\1\117\35\116\2\260\21\116\43\0\2\261\72\0"+
    "\2\262\25\0\1\231\22\0\2\232\25\0\1\263\55\0"+
    "\1\263\2\0\2\122\4\0\1\152\1\264\3\122\1\0"+
    "\1\122\6\0\4\122\5\0\22\122\1\0\1\122\4\0"+
    "\2\64\6\0\3\64\1\0\1\64\6\0\4\64\5\0"+
    "\10\64\2\265\10\64\1\0\1\64\4\0\2\64\6\0"+
    "\3\64\1\0\1\64\6\0\4\64\5\0\20\64\2\266"+
    "\1\0\1\64\13\0\1\35\53\0\4\167\1\0\7\167"+
    "\1\242\1\267\1\167\1\134\1\167\1\224\1\167\1\171"+
    "\6\167\1\163\35\167\1\0\1\270\11\167\1\134\1\167"+
    "\1\224\1\243\1\171\6\167\1\271\27\167\1\270\1\167"+
    "\4\77\1\0\12\77\1\100\1\77\1\135\1\165\1\101"+
    "\6\77\1\102\31\77\23\245\1\272\6\245\1\273\31\245"+
    "\4\217\1\245\7\217\1\274\2\217\1\275\1\217\1\246"+
    "\1\276\1\247\6\217\1\250\35\217\1\0\12\217\1\245"+
    "\1\217\1\246\42\217\4\102\1\0\12\102\1\0\1\102"+
    "\1\140\1\174\41\102\4\220\1\0\10\220\1\251\1\277"+
    "\1\134\1\220\1\166\1\220\1\223\6\220\1\136\35\220"+
    "\1\0\1\252\11\220\1\134\1\220\1\166\1\220\1\223"+
    "\6\220\1\253\27\220\1\252\1\220\4\253\1\300\12\253"+
    "\1\300\1\253\1\301\1\253\1\302\6\253\1\303\31\253"+
    "\4\102\1\0\12\102\1\173\1\102\1\140\1\174\41\102"+
    "\43\0\2\304\72\0\2\305\25\0\1\255\22\0\2\256"+
    "\66\0\2\306\72\0\2\307\12\0\1\204\2\0\1\153"+
    "\51\0\1\204\2\0\2\64\6\0\1\64\1\310\1\64"+
    "\1\0\1\64\6\0\2\64\1\310\1\64\5\0\22\64"+
    "\1\0\1\64\4\0\2\64\6\0\3\64\1\206\1\64"+
    "\6\0\4\64\5\0\22\64\1\0\1\64\3\0\4\167"+
    "\1\0\10\167\1\267\1\311\1\134\1\167\1\224\1\167"+
    "\1\171\6\167\1\163\35\167\1\0\1\270\11\167\1\134"+
    "\1\167\1\224\1\167\1\171\6\167\1\271\27\167\1\270"+
    "\1\167\4\271\1\312\12\271\1\312\1\271\1\313\1\271"+
    "\1\314\6\271\1\311\31\271\4\245\1\0\57\245\22\0"+
    "\1\315\41\0\4\217\1\245\7\217\1\274\1\316\1\217"+
    "\1\245\1\217\1\246\1\217\1\247\6\217\1\250\35\217"+
    "\1\245\12\217\1\275\3\217\1\247\6\217\1\250\35\217"+
    "\1\245\1\317\11\217\1\245\1\217\1\246\1\276\1\247"+
    "\6\217\1\320\27\217\1\317\1\217\4\220\1\0\12\220"+
    "\1\100\1\220\1\166\1\222\1\223\6\220\1\136\31\220"+
    "\23\300\1\321\6\300\1\322\31\300\4\323\1\300\7\323"+
    "\1\324\2\323\1\325\1\323\1\301\1\326\1\327\6\323"+
    "\1\303\31\323\4\253\1\0\12\253\1\300\1\253\1\301"+
    "\42\253\4\220\1\0\12\220\1\134\1\220\1\166\1\222"+
    "\1\223\6\220\1\136\31\220\45\0\2\330\72\0\2\331"+
    "\17\0\1\332\13\0\1\332\53\0\1\231\46\0\2\64"+
    "\6\0\3\64\1\0\1\64\6\0\4\64\5\0\12\64"+
    "\2\266\6\64\1\0\1\64\3\0\4\167\1\0\12\167"+
    "\1\134\1\167\1\224\1\243\1\171\6\167\1\163\31\167"+
    "\23\312\1\333\6\312\1\334\31\312\4\335\1\312\7\335"+
    "\1\336\2\335\1\337\1\335\1\340\1\341\1\342\6\335"+
    "\1\311\31\335\4\271\1\0\12\271\1\312\1\271\1\313"+
    "\42\271\5\0\1\343\14\0\1\315\7\0\1\245\27\0"+
    "\1\343\1\0\4\217\1\245\10\217\1\316\1\344\1\245"+
    "\1\217\1\246\1\217\1\247\6\217\1\250\35\217\1\245"+
    "\1\317\11\217\1\245\1\217\1\246\1\217\1\247\6\217"+
    "\1\320\27\217\1\317\5\217\1\245\12\217\1\245\1\217"+
    "\1\246\1\276\1\247\6\217\1\250\31\217\4\300\1\0"+
    "\57\300\4\345\1\0\12\345\1\134\1\345\1\346\1\347"+
    "\1\350\6\345\1\0\31\345\4\323\1\300\12\323\1\351"+
    "\1\323\1\301\1\323\1\327\6\323\1\303\35\323\1\300"+
    "\7\323\1\324\1\352\1\323\1\351\1\323\1\301\1\323"+
    "\1\327\6\323\1\303\31\323\4\253\1\300\12\253\1\325"+
    "\3\253\1\302\6\253\1\303\31\253\4\323\1\300\1\353"+
    "\11\323\1\351\1\323\1\301\1\326\1\327\6\323\1\354"+
    "\27\323\1\353\5\323\1\0\12\323\1\355\1\323\1\301"+
    "\1\323\1\356\40\323\12\0\1\357\13\0\1\357\53\0"+
    "\1\255\114\0\2\307\13\0\4\312\1\0\57\312\4\345"+
    "\1\0\12\345\1\134\1\345\1\346\1\360\1\350\6\345"+
    "\1\0\31\345\4\335\1\312\12\335\1\337\1\335\1\340"+
    "\1\335\1\342\6\335\1\311\35\335\1\312\7\335\1\336"+
    "\1\361\1\335\1\337\1\335\1\340\1\335\1\342\6\335"+
    "\1\311\31\335\4\271\1\312\12\271\1\337\3\271\1\314"+
    "\6\271\1\311\31\271\4\335\1\312\1\362\11\335\1\337"+
    "\1\335\1\340\1\341\1\342\6\335\1\363\27\335\1\362"+
    "\5\335\1\0\12\335\1\364\1\335\1\340\1\335\1\365"+
    "\40\335\5\0\1\343\24\0\1\245\27\0\1\343\1\0"+
    "\4\217\1\245\12\217\1\275\1\217\1\246\1\276\1\247"+
    "\6\217\1\250\31\217\4\345\1\0\12\345\1\134\1\345"+
    "\1\346\1\345\1\350\6\345\1\0\35\345\1\0\1\366"+
    "\11\345\1\134\1\345\1\346\1\347\1\350\6\345\1\300"+
    "\27\345\1\366\5\345\1\0\12\345\1\137\1\345\1\346"+
    "\1\345\1\350\40\345\4\367\1\300\12\367\1\351\3\367"+
    "\1\370\6\367\1\371\31\367\4\323\1\300\10\323\1\352"+
    "\1\372\1\351\1\323\1\301\1\323\1\327\6\323\1\303"+
    "\35\323\1\300\1\353\11\323\1\351\1\323\1\301\1\323"+
    "\1\327\6\323\1\354\27\323\1\353\5\323\1\300\12\323"+
    "\1\351\1\323\1\301\1\326\1\327\6\323\1\303\31\323"+
    "\4\373\1\300\12\373\1\351\1\373\1\374\1\373\1\375"+
    "\6\373\1\371\31\373\4\323\1\300\12\323\1\355\1\323"+
    "\1\301\1\323\1\327\6\323\1\303\31\323\47\0\2\331"+
    "\13\0\4\345\1\0\1\376\11\345\1\134\1\345\1\346"+
    "\1\360\1\350\6\345\1\312\27\345\1\376\1\345\4\335"+
    "\1\312\10\335\1\361\1\363\1\337\1\335\1\340\1\335"+
    "\1\342\6\335\1\311\35\335\1\312\1\362\11\335\1\337"+
    "\1\335\1\340\1\335\1\342\6\335\1\363\27\335\1\362"+
    "\5\335\1\312\12\335\1\337\1\335\1\340\1\341\1\342"+
    "\6\335\1\311\35\335\1\312\12\335\1\337\1\335\1\377"+
    "\1\335\1\342\6\335\1\311\35\335\1\312\12\335\1\364"+
    "\1\335\1\340\1\335\1\342\6\335\1\311\31\335\4\345"+
    "\1\0\1\366\11\345\1\134\1\345\1\346\1\345\1\350"+
    "\6\345\1\300\27\345\1\366\1\345\4\367\1\300\12\367"+
    "\1\300\1\367\1\u0100\1\367\1\370\6\367\1\371\35\367"+
    "\1\0\12\367\1\300\1\367\1\u0100\42\367\4\167\1\0"+
    "\12\167\1\134\1\167\1\224\1\u0101\1\171\6\167\1\163"+
    "\31\167\4\323\1\300\12\323\1\325\1\323\1\301\1\326"+
    "\1\327\6\323\1\303\31\323\4\373\1\300\12\373\1\351"+
    "\1\373\1\u0102\1\373\1\375\6\373\1\371\35\373\1\0"+
    "\12\373\1\355\1\373\1\u0102\1\373\1\u0103\40\373\4\345"+
    "\1\0\1\376\11\345\1\134\1\345\1\346\1\345\1\350"+
    "\6\345\1\312\27\345\1\376\1\345\4\373\1\300\7\373"+
    "\1\u0104\2\373\1\351\1\373\1\u0102\1\u0105\1\375\6\373"+
    "\1\371\31\373\4\167\1\0\1\u0106\11\167\1\134\1\167"+
    "\1\224\1\u0101\1\171\6\167\1\367\27\167\1\u0106\1\167"+
    "\4\373\1\300\12\373\1\355\1\373\1\u0102\1\373\1\375"+
    "\6\373\1\371\35\373\1\300\7\373\1\u0104\1\u0107\1\373"+
    "\1\351\1\373\1\u0102\1\373\1\375\6\373\1\371\35\373"+
    "\1\300\1\u0108\11\373\1\351\1\373\1\u0102\1\u0105\1\375"+
    "\6\373\1\u0109\27\373\1\u0108\1\373\4\167\1\0\1\u0106"+
    "\11\167\1\134\1\167\1\224\1\167\1\171\6\167\1\367"+
    "\27\167\1\u0106\1\167\4\373\1\300\10\373\1\u0107\1\u010a"+
    "\1\351\1\373\1\u0102\1\373\1\375\6\373\1\371\35\373"+
    "\1\300\1\u0108\11\373\1\351\1\373\1\u0102\1\373\1\375"+
    "\6\373\1\u0109\27\373\1\u0108\1\373\4\335\1\312\12\335"+
    "\1\337\1\335\1\340\1\u010b\1\342\6\335\1\311\31\335"+
    "\4\373\1\300\12\373\1\351\1\373\1\u0102\1\u0105\1\375"+
    "\6\373\1\371\31\373\4\335\1\312\1\u010c\11\335\1\337"+
    "\1\335\1\340\1\u010b\1\342\6\335\1\u010a\27\335\1\u010c"+
    "\5\335\1\312\1\u010c\11\335\1\337\1\335\1\340\1\335"+
    "\1\342\6\335\1\u010a\27\335\1\u010c\1\335";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11544];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\10\7\0\2\1\1\11\6\1\4\11\2\1"+
    "\1\11\5\1\2\11\1\1\1\11\2\1\2\11\1\1"+
    "\1\11\6\1\1\11\3\1\2\11\1\1\11\0\2\1"+
    "\2\0\1\11\5\0\1\11\7\0\3\1\3\0\1\11"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\2\0\1\11"+
    "\5\0\1\1\2\0\2\1\1\0\1\1\4\0\1\1"+
    "\1\0\1\1\5\0\1\1\7\0\1\11\3\1\1\11"+
    "\11\0\1\1\4\0\1\11\5\0\2\1\3\0\1\1"+
    "\1\0\1\1\1\0\1\1\3\0\1\1\1\11\5\0"+
    "\1\11\3\1\4\0\1\1\3\0\1\1\1\0\1\1"+
    "\1\0\1\1\4\0\1\1\7\0\1\1\1\0\1\1"+
    "\15\0\1\1\3\0\1\1\1\0\1\1\5\0\1\1"+
    "\14\0\2\1\1\0\1\1\2\0\1\1\2\0\1\1"+
    "\6\0\1\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */
    private ByteStack stack = new ByteStack();
    private LexerInput input;
    private int pushBackCount = 0;
    private int curlyBalance = 0;
    private int curlyBalanceExpr = 0;
    private boolean hasExpression = false;
    private boolean inExpression = false;
    private boolean inRulesGroup = false;
    private String expression; 

    public JflexColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            //initial state
            stack.push(YYINITIAL);
            zzState = YYINITIAL;
            zzLexicalState = YYINITIAL;
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;

        LexerState(ByteStack stack, int zzState, int zzLexicalState) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }
            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                );
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    //other functions

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JflexColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JflexColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1742) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JflexTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();
            
            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { return  JflexTokenId.T_COMMENT;
          }
        case 35: break;
        case 31: 
          { pushState(ST_JFLEX_CODEVAL_OPTION);
    return JflexTokenId.T_JFLEX_CLASS_CODE_TAG;
          }
        case 36: break;
        case 25: 
          { return JflexTokenId.T_JFLEX_CLASS_CODE_TAG;
          }
        case 37: break;
        case 21: 
          { pushState(ST_JFLEX_OPTIONS_AND_DECLARATIONS);
    return JflexTokenId.T_JFLEX_DECL_WRAPPER_TAG;
          }
        case 38: break;
        case 6: 
          { return JflexTokenId.T_KEYWORD;
          }
        case 39: break;
        case 29: 
          { return JflexTokenId.T_JFLEX_MACRO;
          }
        case 40: break;
        case 13: 
          { pushState(ST_JFLEX_STATE_LEXICAL_RULE_LIST);
    return JflexTokenId.T_CURLY_OPEN;
          }
        case 41: break;
        case 14: 
          { curlyBalanceExpr = 1;
    pushState(ST_JFLEX_STATE_LEXICAL_RULE_CODE);
    return JflexTokenId.T_CURLY_OPEN;
          }
        case 42: break;
        case 32: 
          { popState();
    return JflexTokenId.T_JFLEX_CLASS_CODE_TAG;
          }
        case 43: break;
        case 20: 
          { //just a ordinary char
    return JflexTokenId.T_JAVA;
          }
        case 44: break;
        case 18: 
          { curlyBalanceExpr--;
    if(curlyBalanceExpr ==0){
        if (inRulesGroup){
            pushState(ST_JFLEX_STATE_LEXICAL_RULE_LIST);
        } else {
            pushState(ST_JFLEX_LEXICAL_RULES);
        }
        return JflexTokenId.T_CURLY_CLOSE;
    }
    return JflexTokenId.T_OTHER;
          }
        case 45: break;
        case 17: 
          { curlyBalanceExpr++;
    return JflexTokenId.T_JAVA;
          }
        case 46: break;
        case 3: 
          { pushState(ST_JFLEX_LOOKING_FOR_MACRO_DEFINITION);
        return JflexTokenId.T_JFLEX_MACRO;
          }
        case 47: break;
        case 1: 
          { //until the first "%" we are treating the code as JAVA
    return JflexTokenId.T_JAVA;
          }
        case 48: break;
        case 4: 
          { return JflexTokenId.T_NEWLINE;
          }
        case 49: break;
        case 30: 
          { pushState(ST_JFLEX_STATE_RULE_CONDITION);
    return JflexTokenId.T_JFLEX_LEXICAL_STATE_TAG;
          }
        case 50: break;
        case 23: 
          { pushState(ST_JFLEX_LEXICAL_RULES);
    return JflexTokenId.T_JFLEX_DECL_WRAPPER_TAG;
          }
        case 51: break;
        case 16: 
          { return JflexTokenId.T_JAVA;
          }
        case 52: break;
        case 27: 
          { popState();
    yypushback(2);
    return JflexTokenId.T_JAVA;
          }
        case 53: break;
        case 34: 
          { int spaceCount = 0;
    for (char c : yytext().toCharArray()) {
        if (c == ' ') {
             spaceCount++;
        }
    }
    pushState(ST_JFLEX_STATE_LEXICAL_RULE_GROUP);
    yypushback(spaceCount + 2);
    inRulesGroup = true;
    return JflexTokenId.T_JFLEX_LEXICAL_STATE_TAG;
          }
        case 54: break;
        case 10: 
          { popState();
    popState();
    return JflexTokenId.T_NEWLINE;
          }
        case 55: break;
        case 11: 
          { curlyBalanceExpr++;
    pushState(ST_JFLEX_STATE_LEXICAL_RULE_CODE);
    if (curlyBalanceExpr == 1) {
        return JflexTokenId.T_CURLY_OPEN;
    } else {
        return JflexTokenId.T_OTHER;
    }
          }
        case 56: break;
        case 15: 
          { pushState(ST_JFLEX_LEXICAL_RULES);
    inRulesGroup = false;
    return JflexTokenId.T_CURLY_CLOSE;
          }
        case 57: break;
        case 9: 
          { return JflexTokenId.T_OPERATOR;
          }
        case 58: break;
        case 22: 
          { pushState(ST_JFLEX_LOOKING_FOR_OPTION_PARAM);
    return JflexTokenId.T_JFLEX_OPTION;
          }
        case 59: break;
        case 26: 
          { return JflexTokenId.T_STRING;
          }
        case 60: break;
        case 24: 
          { pushState(ST_JFLEX_LEXER_USERCODE);
    return JflexTokenId.T_JFLEX_CLASS_CODE_TAG;
          }
        case 61: break;
        case 2: 
          { return  JflexTokenId.T_UNKNOWN;
          }
        case 62: break;
        case 19: 
          { return JflexTokenId.T_OTHER;
          }
        case 63: break;
        case 12: 
          { return JflexTokenId.T_JFLEX_REGEX_EXPRESSION;
          }
        case 64: break;
        case 5: 
          { return JflexTokenId.T_WHITESPACE;
          }
        case 65: break;
        case 7: 
          { popState();
    return JflexTokenId.T_NEWLINE;
          }
        case 66: break;
        case 33: 
          { String tt = yytext();
    int directiveNameIndex = tt.lastIndexOf("%");
    yypushback(tt.length() - directiveNameIndex);
    return JflexTokenId.T_JAVA;
          }
        case 67: break;
        case 8: 
          { pushState(ST_JFLEX_MACRO_DEFINITION);
    return JflexTokenId.T_OPERATOR;
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF) 
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_JFLEX_LEXICAL_RULES: {
              if (input.readLength() > 0) {
          input.backup(1);  // backup eof
          return JflexTokenId.T_OTHER;
      }
      else {
          return null;
      }
            }
            case 269: break;
            case YYINITIAL: {
              if (input.readLength() > 0) {
          input.backup(1);  // backup eof
          return JflexTokenId.T_OTHER;
      }
      else {
          return null;
      }
            }
            case 270: break;
            default:
              {         if(input.readLength() > 0) {
            String yytext = yytext();
            // backup eof
            input.backup(1);
            //and return the text as error token
             return JflexTokenId.T_UNKNOWN;
        } else {
            return null;
        }
 }
            }
          
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
